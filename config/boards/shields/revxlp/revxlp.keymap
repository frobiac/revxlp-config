/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

// [ ] @TODO: MouseLayer possible on ZMK? Separate branch
// [ ] @TODO: Dynamic Macros
// [ ] @TODO: XorShift
// [x] @TODO: Shifted Umlauts must be separately on layer, or order of layer activation will matter
// [x] mod-morph: Different mods on shifted character possible? E.g. '.;' on US, or '/\' on DE?

/*
# Notes on the revxlp hardware

## Build
- Use top-plate during socket mount! Will not snap in everywhere otherwise.
- Mount socket on top side last: Makes assembly of sockets much easier with flat surface
- Pogo pins for reset and bat+ connection to the XIAO BLE prevent using the space below the controller for a battery
  Slim wires fit together with battery. Could use longer sockets to have detachable battery and controller without
  additional space needed.
- JST does not seem to allow battery unter controller, either, or battery protudes under USB.
- Magnetic USB adaptor with round connector prevents battery from passing/being mounted underneath.
- Use center space of board for battery and connectors?

## Hardware
- Outer thumbs create vibrations. Maybe use case-mounted instead of PCB sandwich with more bumpons in between?
  -> Solution: Don't put bumpons further out then last screws, bottom plate was warped and thus lifted the center up from desk.

## Software ZMK
- Conditional Tri-Layer breaks permanent layer toggle with &to / &tog !


## Personal layout
- Default thumb position is in the middle with their alignment here. Must switch Tab and Space for more comfort,
  but not modifiers/layers.
- Inner left thumb as i3 modifier with Alt: any advantages of using Hyper/Meh?
- TapDance
- XIAO leds as indicator: @see blinky example, and boards/arm/xiao_ble/xiao_ble_common.dtsi
  [src](https://docs.zephyrproject.org/latest/boards/arm/xiao_ble/doc/index.html)

*/

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/backlight.h>
#include <dt-bindings/zmk/mouse.h>
#include <dt-bindings/zmk/outputs.h>

// @see https://github.com/bzgec/zmk-config/ for inspiration, and related issue
#include "keys_de.h"

#define NUM_L 1
#define SYM_L 2
#define FUN_L 3
#define MOU_L 4
#define SYS_L 5

// Could use shorter defines to fit into current 12 char alignment, but this still means the lines
// will have to be temporarily deleted as the '&' are then missing
// Too long: &td_gui_ralt  &mt LCTRL SPACE &mt LALT TAB  &lt NUM_L ESC &mt LSHIFT BKSP &lt SYM_L RET
// No '&'s : &td_gui_ralt  CTRL_SPACE    ALT_TAB       NUML_ESC      SHFT_BKSP &lt SYM_L RET
#define CTRL_SPACE &mt LCTRL  SPACE
#define ALT_TAB    &mt LALT   TAB
#define NUML_ESC   &lt NUM_L  ESC
#define SHFT_BKSP  &mt LSHIFT BKSP


// Allow tap-repeats
&lt {
        quick-tap-ms = <200>;
};
&mt {
        quick-tap-ms = <200>;
};

&mmv {
    time-to-max-speed-ms = <500>;
};

&mwh {
    acceleration-exponent=<2>;
};


/ {
    tap_dances {
    	shifty: shift_caps_word {
		compatible = "zmk,behavior-tap-dance";
		label = "TD_SHIFTY";
		#binding-cells = <0>;
		tapping-term-ms = <150>;
		bindings = <&kp LSHFT>, <&caps_word>;
	    };
    };

    cond_layers {
        compatible = "zmk,conditional-layers";
        /*
        tri {
            // This disables &tog / &to for MOU_L !!!
            if-layers = <NUM_L SYM_L>;
            then-layer = <MOU_L>;
        };
        */
    };

    combos {
        compatible = "zmk,combos";

        system_layer_combo_upper_pinkies {
            timeout-ms = <50>;
                key-positions = <0 11>;
                bindings = <&sl SYS_L>;
        };
    };

    behaviors {
        // To allow non-shifted versions but keeping shift instead of extra layer.
        // Useful also for US-layout version of '.:', ',;' keys
        both_slh: forward_backward_slash {
            compatible = "zmk,behavior-mod-morph";
            label = "BOTH_SLASHES";
            #binding-cells = <0>;
            bindings = <&kp DE_FSLH>, <&kp DE_BSLH>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        // To be able to use Alt-Tab when both are on the same key due to Tab swap with Space.
        // @TOOD: RAlt-Tab not the same as LAlt-Tab on windows, and double tapping not very easy on left thumb with 200ms.
        td_gui_ralt: tap_dance_gui_ralt {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_GUI_RALT";
            #binding-cells = <0>;
            tapping-term-ms = <350>;
            bindings = <&kp LGUI>, <&kp LALT>, <&kp RCTL>;
        };
    };


    keymap {
        // clang-format off
        compatible = "zmk,keymap";

        frobiac_layer {
            label = "Base";
            bindings = <
                  &kp RCTL      &kp K         &kp U         &kp Q         &kp DE_DOT    &kp J         &kp P         &kp C         &kp L         &kp M         &kp F         &to MOU_L
                  &kp TAB       &kp H         &kp I         &kp E         &kp A         &kp O         &kp D         &kp T         &kp R         &kp N         &kp S         &mo FUN_L
                  &none         &kp X         &kp DE_Y      &kp DE_MINUS  &kp DE_COMMA  &both_slh     &kp B         &kp G         &kp W         &kp V         &kp DE_Z      &none
                  /* delete prior to EasyAlign */         &td_gui_ralt  &mt LCTRL SPACE &mt LALT TAB  &lt NUM_L ESC &mt LSHIFT BKSP &lt SYM_L RET
                >;
        };

        nav_layer {
            label = "NavNum";
            bindings = <
                  &none         &kp PG_UP     &kp BKSP      &kp UP        &kp DEL       &kp PG_DN     &kp DE_SS     &kp N7        &kp N8        &kp N9        &kp DE_ADIA   &kp N
                  &none         &kp HOME      &kp LEFT      &kp DOWN      &kp RIGHT     &kp END       &kp DOT       &kp N4        &kp N5        &kp N6        &kp DE_ODIA   &none
                  &none         &none         &none         &kp INSERT    &none         &none         &kp N0        &kp N1        &kp N2        &kp N3        &kp DE_UDIA   &none
                  // Accessing FUN_L via LSHIFT from here means that
                  // - for shifted variants in this layer (like the Umlauts, but also directions!) Shift must be pressed prior to NAV_L !
                  // - anything shifted in FUN_L is not available!
                  // Alternatives:
                  // - put shifted umlauts also on FUN_L at same spot
                  // - try L1+L2 vs L2+L1 order for 2 layers
                  // - use a different layer accessor: like center most thumbs but will have similar issues with Alt-Direction then.
                  &trans        &trans        &trans        &trans        &mo FUN_L     &trans
                >;
        };

        sym_layer {
            label = "Symbol";
            bindings = <
                  &none         &kp DE_AT     &kp DE_DEGR   &kp DE_LBKT   &kp DE_RBKT   &kp DE_HASH   &kp DE_EXCL   &kp DE_LT     &kp DE_GT     &kp DE_EQUAL  &kp DE_AMPS   &kp S
                  &none         &kp DE_BSLH   &kp DE_EURO   &kp DE_LBRC   &kp DE_RBRC   &kp DE_ASTRK  &kp DE_QMARK  &kp DE_LPAR   &kp DE_RPAR   &kp DE_PLUS   &none         &none
                  &none         &none         &kp DE_DLLR   &kp DE_PIPE   &kp DE_TILD   &kp DE_GRAVE  &kp DE_CRRT   &kp DE_PRCNT  &kp DE_DQT    &kp DE_SQT    &none         &none
                  &trans        &trans        &trans        &trans        &trans        &trans
                >;
        };

        fun_layer {
            label = "Function";
            bindings = <
                  &none         &none         &none         &none         &none         &none         &kp F12       &kp F7        &kp F8        &kp F9        &none         &kp F
                  &none         &none         &none         &none         &none         &none         &kp F11       &kp F4        &kp F5        &kp F6        &none         &none
                  &none         &none         &none         &none         &none         &none         &kp F10       &kp F1        &kp F2        &kp F3        &none         &tog FUN_L
                  &trans        &trans        &trans        &trans        &trans        &trans
                >;
        };

        mouse_layer {
            label = "Mouse";
            bindings = <
                  &none         &none         &none         &mmv MOVE_UP  &none         &none         &none         &kp C_PREV    &kp C_VOL_DN  &kp C_VOL_UP  &kp C_NEXT    &tog MOU_L
                  &none         &none         &mmv MOVE_LEFT &mmv MOVE_DOWN  &mmv MOVE_RIGHT &mwh SCROLL_UP &none   &none         &none         &none         &none         &none
                  &none         &none         &mkp LCLK     &mkp MCLK     &mkp RCLK     &mwh SCROLL_DOWN    &none   &none         &none         &none         &kp K_MUTE    &none
                  &trans        &trans        &trans        &trans        &trans        &trans
                >;
        };

        // Accessed via sticky layer: Repeats are inconvenient, but should not be needed here.
        system_layer {
            label = "System";
            bindings = <
                  &out OUT_TOG  &bt BT_NXT    &bt BT_PRV    &none         &none         &bt BT_CLR    &bootloader   &none         &none         &none         &kp C_MUTE    &kp DE_Y
                  &out OUT_USB  &none         &none         &none         &none         &none         &sys_reset    &none         &none         &none         &none         &none
                  &out OUT_BLE  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &none         &none         &none         &none         &none         &none
                  &trans        &trans        &trans        &trans        &trans        &trans
                >;
        };

#ifdef ONLY_TEMPLATE
        template_layer {
            label = "label";
            bindings = <
               // To use with EasyAlign plugin
               // &len_______12 &len_______12 &len_______12 &len_______12 &len_______12 &len_______12 &len_______12 &len_______12 &len_______12 &len_______12 &len_______12 &len_______12
                  &none         &none         &none         &none         &none         &none         &none         &none         &none         &none         &none         &none
                  &none         &none         &none         &none         &none         &none         &none         &none         &none         &none         &none         &none
                  &none         &none         &none         &none         &none         &none         &none         &none         &none         &none         &none         &none
                  &none         &none         &none         &none         &none         &none         &none         &none         &none         &none         &none         &none
            /*    &             &             &*/           &none         &none         &none         &none         &none         &none
                >;
        };
#endif
    };
};


// vi: ft=dts
